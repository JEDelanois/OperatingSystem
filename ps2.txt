typedef struct match_lock {
spinlock_t the_lock;
// Choose your name and type for these variables
var1; 	int total_na;
var2;	int total_eu;
var3;
var4;
} m_lock_t


void initialization(m_lock_t* m) {
	total_na = 0;
	total_eu = 0;
	spin_unlock(m->the_lock);


}


void na_enter(m_lock_t* m){

	spin_lock(m->the_lock)

	while(m->total_na > 5){			//if it is above limit then wait 
		spin_unlock(m->the_lock);

		spin_lock(m->the_lock)// need to lock again for next read


	}
	m->total_na++      //increment the number of na players

	spin_unlock(m->the_lock);





	spin_lock(m->the_lock)

	while( m->total_na + m->total_eu <10){		// wait here untill you are ready with 10 players

		spin_unlock(m->the_lock);

		spin_lock(m->the_lock)

		}


		spin_unlock(m->the_lock);








___________________________________

	




	spin_lock(m->the_lock);		// does this sit here and wait until it gets a chance to lock iit? if not how so?

		if(m->total_na < 5){ // if less then 5 then add player
			(m->total_na)++
			spin_unlock(m->the_lock);


		}
		else{
			spin_unlock(m->the_lock);
			while(1){
						// do nothing and wait forever
			}
		}


		spin_lock(m->the_lock);
		while( total_na + total_eu < 10){
		


		}

		unlock






////TRY 1 deff wrong


	while(m->the_lock == 1){	//while it is locked sit here and do nothing

	}

	//if its not locked increas the number of players entered by 1
	m->total_na++;
	
	if(total_na == 5){

	}
}


void eu_enter(m_lock_t* m){
}