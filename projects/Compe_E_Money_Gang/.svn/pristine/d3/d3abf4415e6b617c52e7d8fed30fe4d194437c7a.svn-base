#include "lib.h"
#include "x86_desc.h" 
#include "keyboard.h"
#include "i8259.h"
#include "wrapper.h"
#include "idt.h"
#include "keyboard.h"
#include "rtc.h"
int rtc_action;
volatile int int_flag;


	
	//file operation table for the rtc
	func_ptr rtc_func_table[3] = { (func_ptr)rtc_open, (func_ptr)rtc_read, (func_ptr)rtc_write }; 

/*
 *   init_rtc
 *   DESCRIPTION: initializes the rtc device
 *   INPUTS: none
 *   OUTPUTS: none
 *   RETURN VALUE: none
 *   SIDE EFFECTS: Updates IDT for the keyboard (0x28) and writes to register B to enable periodic interrupts 
 */  
void init_rtc() {

	set_intrpt_gate_desc(IRQ8);				//update idt struct

	SET_IDT_ENTRY(idt[IRQ8], rtc_wrapper);	//set table and offsets from struct
	
	//initialize hardware - registers
	
	//cli();							//mask interrupts
	
	//turn on periodic interrupts (Code from OSDev)
	outb( 0x8B, 0x70);
	char temp = inb(0x71);
	outb(0x8B, 0x70);
	outb( temp | 0x40, 0x71);

	//sti();							//unmask interrupts
	enable_irq(8);
	
	return;
}



/*
 * rtc_handler
 *   DESCRIPTION:	 Handles each rtc interrupt
 *   INPUTS: none
 *   OUTPUTS: none
 *   RETURN VALUE: none
 *   SIDE EFFECTS: calls 'test_interrupts' and writes to register C to enable interrupts again (OSDev)
 */   
void rtc_handler() {

	//disable_irq(8);				//mask slave PIC
	//disable_irq(2);				//mask master PIC
	if (rtc_action)
		test_interrupts();			//call 'test_interrupts' handler from lib.c
	

	//Must write to register C to make sure interrupts can keep happening
	outb(0x0C, 0x70);	
	inb(0x71);		

	send_eoi(8);

	int_flag = 0;
	//send_eoi(2);
	
	//enable_irq(8);
	//enable_irq(2);
	return;

}


/*
 * rtc_read
 *   DESCRIPTION: The function that is called by the read system call for RTC. Simply waits
 *					until the RTC generates an interrupt.
 *   INPUTS: Unused.
 *   OUTPUTS: none
 *   RETURN VALUE: 0 after RTC interrupt occurs
 *   SIDE EFFECTS: 
 */ 
int32_t rtc_read(int32_t fd,int8_t* buff, uint32_t offset, int32_t nbytes){


	char current;
	int i = 0;				//Will hold the current rate number for the RTC interrupts (used to check if disabled)
	int_flag = 1;


	outb(0x8A, 0x70);		//Set index to register A
	current = inb(0x71);	//Grab the current rate information from the RTC
	current &= 0x0F;		//Clear irrelevant bits

	if(current == 0){
		return -1;
	}

	while(int_flag){		//Spin until the RTC generates an interrupt
		i++;
	}

	return 0;
}


/*
 * rtc_write
 *   DESCRIPTION: The function that is called by the write system call for RTC
 *   INPUTS: nbytes -- must be 4 for proper functionality as per the sys call convention.
 *				buf -- void pointer to a 32 bit integer that holds the frequency requested.
 *				
 *   OUTPUTS: none
 *   RETURN VALUE: 0 on successful change, -1 on invalid input.
 *   SIDE EFFECTS: 
 */ 
int32_t rtc_write(const void* buf, int32_t nbytes){

	int rate = 0;			//The rate used for setting the RTC frequency: described by 32768 >> (rate - 1) Hz
	int arg = *(int*)buf;

	clear();

	if(nbytes != 4){
		return (int32_t) (-1);
	}

	//Map the argument to the required rate
	switch(arg){
		case 0: rate = 0;
				break;
		case 2: rate = 15;
				break;
		case 4: rate = 14;
				break;
		case 8: rate = 13;
				break;
		case 16: rate = 12;
				break;
		case 32: rate = 11;
				break;
		case 64: rate = 10;
				break;
		case 128: rate = 9;
				break;
		case 256: rate = 8;
				break;
		case 512: rate = 7;
				break;
		case 1024: rate = 6;
				break;
		default:
			return -1;
	}


	//Code used from OSDEV to change the frequency of the RTC interrupts.
	rate &= 0x0F;
	cli();
	outb(0x8A, 0x70);
	char prev = inb(0x71);
	outb(0x8A, 0x70);
	outb((prev & 0xF0) | rate, 0x71);
	sti();


	return 0;
}


/*
 * rtc_open
 *   DESCRIPTION: Changes the RTC interrupt frequency to 2 Hz regardless of input.
 *   INPUTS: Unused.
 *   OUTPUTS: none
 *   RETURN VALUE: 0 on success
 *   SIDE EFFECTS: 
 */ 
int32_t rtc_open(file_entry_t * file_desc_entry, dentry_t * dentry){

		//update file descriptor array
		file_desc_entry->fop_table_ptr = rtc_func_table;	//file op table pointer (function pointer)
		file_desc_entry->inode_ptr = NULL;	
		file_desc_entry->file_pos = 0;
		file_desc_entry->flags = 1;


	cli();
	//Disable NMI?
	outb(0x8A, 0x70);
	char prev = inb(0x71);
	outb(0x8A, 0x70);
	outb((prev & 0xF0) | 0x0F, 0x71);
	sti();

	return 0;
}


/*
 * rtc_close
 *   DESCRIPTION: Currently only prints to demonstrate that it is called
 *   INPUTS: Unused.
 *   OUTPUTS: none
 *   RETURN VALUE: 0 on success
 *   SIDE EFFECTS: 
 */ 
int32_t rtc_close(int32_t fd){

	return 0;
}

	
